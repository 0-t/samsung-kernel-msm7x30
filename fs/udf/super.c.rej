--- fs/udf/super.c
+++ fs/udf/super.c
@@ -1215,65 +1214,16 @@
 	return ret;
 }
 
-static int udf_load_sparable_map(struct super_block *sb,
-				 struct udf_part_map *map,
-				 struct sparablePartitionMap *spm)
-{
-	uint32_t loc;
-	uint16_t ident;
-	struct sparingTable *st;
-	struct udf_sparing_data *sdata = &map->s_type_specific.s_sparing;
-	int i;
-	struct buffer_head *bh;
-
-	map->s_partition_type = UDF_SPARABLE_MAP15;
-	sdata->s_packet_len = le16_to_cpu(spm->packetLength);
-	if (!is_power_of_2(sdata->s_packet_len)) {
-		udf_err(sb, "error loading logical volume descriptor: "
-			"Invalid packet length %u\n",
-			(unsigned)sdata->s_packet_len);
-		return -EIO;
-	}
-	if (spm->numSparingTables > 4) {
-		udf_err(sb, "error loading logical volume descriptor: "
-			"Too many sparing tables (%d)\n",
-			(int)spm->numSparingTables);
-		return -EIO;
-	}
-
-	for (i = 0; i < spm->numSparingTables; i++) {
-		loc = le32_to_cpu(spm->locSparingTable[i]);
-		bh = udf_read_tagged(sb, loc, loc, &ident);
-		if (!bh)
-			continue;
-
-		st = (struct sparingTable *)bh->b_data;
-		if (ident != 0 ||
-		    strncmp(st->sparingIdent.ident, UDF_ID_SPARING,
-			    strlen(UDF_ID_SPARING)) ||
-		    sizeof(*st) + le16_to_cpu(st->reallocationTableLen) >
-							sb->s_blocksize) {
-			brelse(bh);
-			continue;
-		}
-
-		sdata->s_spar_map[i] = bh;
-	}
-	map->s_partition_func = udf_get_pblock_spar15;
-	return 0;
-}
-
 static int udf_load_logicalvol(struct super_block *sb, sector_t block,
 			       struct kernel_lb_addr *fileset)
 {
 	struct logicalVolDesc *lvd;
-	int i, offset;
+	int i, j, offset;
 	uint8_t type;
 	struct udf_sb_info *sbi = UDF_SB(sb);
 	struct genericPartitionMap *gpm;
 	uint16_t ident;
 	struct buffer_head *bh;
-	unsigned int table_len;
 	int ret = 0;
 
 	bh = udf_read_tagged(sb, block, block, &ident);
@@ -1281,21 +1231,15 @@
 		return 1;
 	BUG_ON(ident != TAG_IDENT_LVD);
 	lvd = (struct logicalVolDesc *)bh->b_data;
-	table_len = le32_to_cpu(lvd->mapTableLength);
-	if (table_len > sb->s_blocksize - sizeof(*lvd)) {
-		udf_err(sb, "error loading logical volume descriptor: "
-			"Partition table too long (%u > %lu)\n", table_len,
-			sb->s_blocksize - sizeof(*lvd));
-		ret = 1;
+
+	i = udf_sb_alloc_partition_maps(sb, le32_to_cpu(lvd->numPartitionMaps));
+	if (i != 0) {
+		ret = i;
 		goto out_bh;
 	}
 
-	ret = udf_sb_alloc_partition_maps(sb, le32_to_cpu(lvd->numPartitionMaps));
-	if (ret)
-		goto out_bh;
-
 	for (i = 0, offset = 0;
-	     i < sbi->s_partitions && offset < table_len;
+	     i < sbi->s_partitions && offset < le32_to_cpu(lvd->mapTableLength);
 	     i++, offset += gpm->partitionMapLength) {
 		struct udf_part_map *map = &sbi->s_partmaps[i];
 		gpm = (struct genericPartitionMap *)
